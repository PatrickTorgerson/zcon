//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const MILBITMAPEFFECT_SDK_VERSION = @as(u32, 16777216);
pub const CLSID_MILBitmapEffectGroup = Guid.initString("ac9c1a9a-7e18-4f64-ac7e-47cf7f051e95");
pub const CLSID_MILBitmapEffectBlur = Guid.initString("a924df87-225d-4373-8f5b-b90ec85ae3de");
pub const CLSID_MILBitmapEffectDropShadow = Guid.initString("459a3fbe-d8ac-4692-874b-7a265715aa16");
pub const CLSID_MILBitmapEffectOuterGlow = Guid.initString("e2161bdd-7eb6-4725-9c0b-8a2a1b4f0667");
pub const CLSID_MILBitmapEffectBevel = Guid.initString("fd361dbe-6c9b-4de0-8290-f6400c2737ed");
pub const CLSID_MILBitmapEffectEmboss = Guid.initString("cd299846-824f-47ec-a007-12aa767f2816");

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
pub const MilRectD = extern struct {
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
};

pub const MilPoint2D = extern struct {
    X: f64,
    Y: f64,
};

pub const MILMatrixF = extern struct {
    _11: f64,
    _12: f64,
    _13: f64,
    _14: f64,
    _21: f64,
    _22: f64,
    _23: f64,
    _24: f64,
    _31: f64,
    _32: f64,
    _33: f64,
    _34: f64,
    _41: f64,
    _42: f64,
    _43: f64,
    _44: f64,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectorInfo_Value = Guid.initString("f66d2e4b-b46b-42fc-859e-3da0ecdb3c43");
pub const IID_IMILBitmapEffectConnectorInfo = &IID_IMILBitmapEffectConnectorInfo_Value;
pub const IMILBitmapEffectConnectorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIndex: fn(
            self: *const IMILBitmapEffectConnectorInfo,
            puiIndex: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptimalFormat: fn(
            self: *const IMILBitmapEffectConnectorInfo,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberFormats: fn(
            self: *const IMILBitmapEffectConnectorInfo,
            pulNumberFormats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: fn(
            self: *const IMILBitmapEffectConnectorInfo,
            ulIndex: u32,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectorInfo_GetIndex(self: *const T, puiIndex: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectorInfo.VTable, self.vtable).GetIndex(@ptrCast(*const IMILBitmapEffectConnectorInfo, self), puiIndex);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectorInfo_GetOptimalFormat(self: *const T, pFormat: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectorInfo.VTable, self.vtable).GetOptimalFormat(@ptrCast(*const IMILBitmapEffectConnectorInfo, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectorInfo_GetNumberFormats(self: *const T, pulNumberFormats: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectorInfo.VTable, self.vtable).GetNumberFormats(@ptrCast(*const IMILBitmapEffectConnectorInfo, self), pulNumberFormats);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectorInfo_GetFormat(self: *const T, ulIndex: u32, pFormat: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectorInfo.VTable, self.vtable).GetFormat(@ptrCast(*const IMILBitmapEffectConnectorInfo, self), ulIndex, pFormat);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectionsInfo_Value = Guid.initString("476b538a-c765-4237-ba4a-d6a880ff0cfc");
pub const IID_IMILBitmapEffectConnectionsInfo = &IID_IMILBitmapEffectConnectionsInfo_Value;
pub const IMILBitmapEffectConnectionsInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberInputs: fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            puiNumInputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOutputs: fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            puiNumOutputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputConnectorInfo: fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            uiIndex: u32,
            ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnectorInfo: fn(
            self: *const IMILBitmapEffectConnectionsInfo,
            uiIndex: u32,
            ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectionsInfo_GetNumberInputs(self: *const T, puiNumInputs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectionsInfo.VTable, self.vtable).GetNumberInputs(@ptrCast(*const IMILBitmapEffectConnectionsInfo, self), puiNumInputs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectionsInfo_GetNumberOutputs(self: *const T, puiNumOutputs: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectionsInfo.VTable, self.vtable).GetNumberOutputs(@ptrCast(*const IMILBitmapEffectConnectionsInfo, self), puiNumOutputs);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectionsInfo_GetInputConnectorInfo(self: *const T, uiIndex: u32, ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectionsInfo.VTable, self.vtable).GetInputConnectorInfo(@ptrCast(*const IMILBitmapEffectConnectionsInfo, self), uiIndex, ppConnectorInfo);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnectionsInfo_GetOutputConnectorInfo(self: *const T, uiIndex: u32, ppConnectorInfo: ?*?*IMILBitmapEffectConnectorInfo) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnectionsInfo.VTable, self.vtable).GetOutputConnectorInfo(@ptrCast(*const IMILBitmapEffectConnectionsInfo, self), uiIndex, ppConnectorInfo);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnections_Value = Guid.initString("c2b5d861-9b1a-4374-89b0-dec4874d6a81");
pub const IID_IMILBitmapEffectConnections = &IID_IMILBitmapEffectConnections_Value;
pub const IMILBitmapEffectConnections = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: fn(
            self: *const IMILBitmapEffectConnections,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnector: fn(
            self: *const IMILBitmapEffectConnections,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnections_GetInputConnector(self: *const T, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnections.VTable, self.vtable).GetInputConnector(@ptrCast(*const IMILBitmapEffectConnections, self), uiIndex, ppConnector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnections_GetOutputConnector(self: *const T, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnections.VTable, self.vtable).GetOutputConnector(@ptrCast(*const IMILBitmapEffectConnections, self), uiIndex, ppConnector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffect_Value = Guid.initString("8a6ff321-c944-4a1b-9944-9954af301258");
pub const IID_IMILBitmapEffect = &IID_IMILBitmapEffect_Value;
pub const IMILBitmapEffect = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: fn(
            self: *const IMILBitmapEffect,
            uiIndex: u32,
            pContext: ?*IMILBitmapEffectRenderContext,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentEffect: fn(
            self: *const IMILBitmapEffect,
            ppParentEffect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSource: fn(
            self: *const IMILBitmapEffect,
            uiIndex: u32,
            pBitmapSource: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffect_GetOutput(self: *const T, uiIndex: u32, pContext: ?*IMILBitmapEffectRenderContext, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffect.VTable, self.vtable).GetOutput(@ptrCast(*const IMILBitmapEffect, self), uiIndex, pContext, ppBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffect_GetParentEffect(self: *const T, ppParentEffect: ?*?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffect.VTable, self.vtable).GetParentEffect(@ptrCast(*const IMILBitmapEffect, self), ppParentEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffect_SetInputSource(self: *const T, uiIndex: u32, pBitmapSource: ?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffect.VTable, self.vtable).SetInputSource(@ptrCast(*const IMILBitmapEffect, self), uiIndex, pBitmapSource);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectImpl_Value = Guid.initString("cc2468f2-9936-47be-b4af-06b5df5dbcbb");
pub const IID_IMILBitmapEffectImpl = &IID_IMILBitmapEffectImpl_Value;
pub const IMILBitmapEffectImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsInPlaceModificationAllowed: fn(
            self: *const IMILBitmapEffectImpl,
            pOutputConnector: ?*IMILBitmapEffectOutputConnector,
            pfModifyInPlace: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParentEffect: fn(
            self: *const IMILBitmapEffectImpl,
            pParentEffect: ?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSource: fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSourceBounds: fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputBitmapSource: fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRenderContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBitmapSource: fn(
            self: *const IMILBitmapEffectImpl,
            uiIndex: u32,
            pRenderContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: fn(
            self: *const IMILBitmapEffectImpl,
            pInner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_IsInPlaceModificationAllowed(self: *const T, pOutputConnector: ?*IMILBitmapEffectOutputConnector, pfModifyInPlace: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).IsInPlaceModificationAllowed(@ptrCast(*const IMILBitmapEffectImpl, self), pOutputConnector, pfModifyInPlace);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_SetParentEffect(self: *const T, pParentEffect: ?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).SetParentEffect(@ptrCast(*const IMILBitmapEffectImpl, self), pParentEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_GetInputSource(self: *const T, uiIndex: u32, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).GetInputSource(@ptrCast(*const IMILBitmapEffectImpl, self), uiIndex, ppBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_GetInputSourceBounds(self: *const T, uiIndex: u32, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).GetInputSourceBounds(@ptrCast(*const IMILBitmapEffectImpl, self), uiIndex, pRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_GetInputBitmapSource(self: *const T, uiIndex: u32, pRenderContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).GetInputBitmapSource(@ptrCast(*const IMILBitmapEffectImpl, self), uiIndex, pRenderContext, pfModifyInPlace, ppBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_GetOutputBitmapSource(self: *const T, uiIndex: u32, pRenderContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).GetOutputBitmapSource(@ptrCast(*const IMILBitmapEffectImpl, self), uiIndex, pRenderContext, pfModifyInPlace, ppBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectImpl_Initialize(self: *const T, pInner: ?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectImpl.VTable, self.vtable).Initialize(@ptrCast(*const IMILBitmapEffectImpl, self), pInner);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroup_Value = Guid.initString("2f952360-698a-4ac6-81a1-bcfdf08eb8e8");
pub const IID_IMILBitmapEffectGroup = &IID_IMILBitmapEffectGroup_Value;
pub const IMILBitmapEffectGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInteriorInputConnector: fn(
            self: *const IMILBitmapEffectGroup,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInteriorOutputConnector: fn(
            self: *const IMILBitmapEffectGroup,
            uiIndex: u32,
            ppConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: fn(
            self: *const IMILBitmapEffectGroup,
            pEffect: ?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroup_GetInteriorInputConnector(self: *const T, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroup.VTable, self.vtable).GetInteriorInputConnector(@ptrCast(*const IMILBitmapEffectGroup, self), uiIndex, ppConnector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroup_GetInteriorOutputConnector(self: *const T, uiIndex: u32, ppConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroup.VTable, self.vtable).GetInteriorOutputConnector(@ptrCast(*const IMILBitmapEffectGroup, self), uiIndex, ppConnector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroup_Add(self: *const T, pEffect: ?*IMILBitmapEffect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroup.VTable, self.vtable).Add(@ptrCast(*const IMILBitmapEffectGroup, self), pEffect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroupImpl_Value = Guid.initString("78fed518-1cfc-4807-8b85-6b6e51398f62");
pub const IID_IMILBitmapEffectGroupImpl = &IID_IMILBitmapEffectGroupImpl_Value;
pub const IMILBitmapEffectGroupImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Preprocess: fn(
            self: *const IMILBitmapEffectGroupImpl,
            pContext: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberChildren: fn(
            self: *const IMILBitmapEffectGroupImpl,
            puiNumberChildren: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChildren: fn(
            self: *const IMILBitmapEffectGroupImpl,
            pChildren: ?*?*IMILBitmapEffects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroupImpl_Preprocess(self: *const T, pContext: ?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroupImpl.VTable, self.vtable).Preprocess(@ptrCast(*const IMILBitmapEffectGroupImpl, self), pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroupImpl_GetNumberChildren(self: *const T, puiNumberChildren: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroupImpl.VTable, self.vtable).GetNumberChildren(@ptrCast(*const IMILBitmapEffectGroupImpl, self), puiNumberChildren);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectGroupImpl_GetChildren(self: *const T, pChildren: ?*?*IMILBitmapEffects) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectGroupImpl.VTable, self.vtable).GetChildren(@ptrCast(*const IMILBitmapEffectGroupImpl, self), pChildren);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContext_Value = Guid.initString("12a2ec7e-2d33-44b2-b334-1abb7846e390");
pub const IID_IMILBitmapEffectRenderContext = &IID_IMILBitmapEffectRenderContext_Value;
pub const IMILBitmapEffectRenderContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOutputPixelFormat: fn(
            self: *const IMILBitmapEffectRenderContext,
            format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputPixelFormat: fn(
            self: *const IMILBitmapEffectRenderContext,
            pFormat: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUseSoftwareRenderer: fn(
            self: *const IMILBitmapEffectRenderContext,
            fSoftware: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialTransform: fn(
            self: *const IMILBitmapEffectRenderContext,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalTransform: fn(
            self: *const IMILBitmapEffectRenderContext,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputDPI: fn(
            self: *const IMILBitmapEffectRenderContext,
            dblDpiX: f64,
            dblDpiY: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputDPI: fn(
            self: *const IMILBitmapEffectRenderContext,
            pdblDpiX: ?*f64,
            pdblDpiY: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRegionOfInterest: fn(
            self: *const IMILBitmapEffectRenderContext,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_SetOutputPixelFormat(self: *const T, format: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).SetOutputPixelFormat(@ptrCast(*const IMILBitmapEffectRenderContext, self), format);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_GetOutputPixelFormat(self: *const T, pFormat: ?*Guid) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).GetOutputPixelFormat(@ptrCast(*const IMILBitmapEffectRenderContext, self), pFormat);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_SetUseSoftwareRenderer(self: *const T, fSoftware: i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).SetUseSoftwareRenderer(@ptrCast(*const IMILBitmapEffectRenderContext, self), fSoftware);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_SetInitialTransform(self: *const T, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).SetInitialTransform(@ptrCast(*const IMILBitmapEffectRenderContext, self), pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_GetFinalTransform(self: *const T, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).GetFinalTransform(@ptrCast(*const IMILBitmapEffectRenderContext, self), pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_SetOutputDPI(self: *const T, dblDpiX: f64, dblDpiY: f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).SetOutputDPI(@ptrCast(*const IMILBitmapEffectRenderContext, self), dblDpiX, dblDpiY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_GetOutputDPI(self: *const T, pdblDpiX: ?*f64, pdblDpiY: ?*f64) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).GetOutputDPI(@ptrCast(*const IMILBitmapEffectRenderContext, self), pdblDpiX, pdblDpiY);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContext_SetRegionOfInterest(self: *const T, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContext.VTable, self.vtable).SetRegionOfInterest(@ptrCast(*const IMILBitmapEffectRenderContext, self), pRect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContextImpl_Value = Guid.initString("4d25accb-797d-4fd2-b128-dffeff84fcc3");
pub const IID_IMILBitmapEffectRenderContextImpl = &IID_IMILBitmapEffectRenderContextImpl_Value;
pub const IMILBitmapEffectRenderContextImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUseSoftwareRenderer: fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pfSoftware: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransform: fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pMatrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBounds: fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOutputBounds: fn(
            self: *const IMILBitmapEffectRenderContextImpl,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContextImpl_GetUseSoftwareRenderer(self: *const T, pfSoftware: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContextImpl.VTable, self.vtable).GetUseSoftwareRenderer(@ptrCast(*const IMILBitmapEffectRenderContextImpl, self), pfSoftware);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContextImpl_GetTransform(self: *const T, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContextImpl.VTable, self.vtable).GetTransform(@ptrCast(*const IMILBitmapEffectRenderContextImpl, self), pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContextImpl_UpdateTransform(self: *const T, pMatrix: ?*MILMatrixF) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContextImpl.VTable, self.vtable).UpdateTransform(@ptrCast(*const IMILBitmapEffectRenderContextImpl, self), pMatrix);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContextImpl_GetOutputBounds(self: *const T, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContextImpl.VTable, self.vtable).GetOutputBounds(@ptrCast(*const IMILBitmapEffectRenderContextImpl, self), pRect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectRenderContextImpl_UpdateOutputBounds(self: *const T, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectRenderContextImpl.VTable, self.vtable).UpdateOutputBounds(@ptrCast(*const IMILBitmapEffectRenderContextImpl, self), pRect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectFactory_Value = Guid.initString("33a9df34-a403-4ec7-b07e-bc0682370845");
pub const IID_IMILBitmapEffectFactory = &IID_IMILBitmapEffectFactory_Value;
pub const IMILBitmapEffectFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEffect: fn(
            self: *const IMILBitmapEffectFactory,
            pguidEffect: ?*const Guid,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContext: fn(
            self: *const IMILBitmapEffectFactory,
            ppContext: ?*?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectOuter: fn(
            self: *const IMILBitmapEffectFactory,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectFactory_CreateEffect(self: *const T, pguidEffect: ?*const Guid, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectFactory.VTable, self.vtable).CreateEffect(@ptrCast(*const IMILBitmapEffectFactory, self), pguidEffect, ppEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectFactory_CreateContext(self: *const T, ppContext: ?*?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectFactory.VTable, self.vtable).CreateContext(@ptrCast(*const IMILBitmapEffectFactory, self), ppContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectFactory_CreateEffectOuter(self: *const T, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectFactory.VTable, self.vtable).CreateEffectOuter(@ptrCast(*const IMILBitmapEffectFactory, self), ppEffect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitive_Value = Guid.initString("67e31025-3091-4dfc-98d6-dd494551461d");
pub const IID_IMILBitmapEffectPrimitive = &IID_IMILBitmapEffectPrimitive_Value;
pub const IMILBitmapEffectPrimitive = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pContext: ?*IMILBitmapEffectRenderContext,
            pfModifyInPlace: ?*i16,
            ppBitmapSource: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformPoint: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            p: ?*MilPoint2D,
            fForwardTransform: i16,
            pContext: ?*IMILBitmapEffectRenderContext,
            pfPointTransformed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformRect: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            p: ?*MilRectD,
            fForwardTransform: i16,
            pContext: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasAffineTransform: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pfAffine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasInverseTransform: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pfHasInverse: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAffineMatrix: fn(
            self: *const IMILBitmapEffectPrimitive,
            uiIndex: u32,
            pMatrix: ?*MilMatrix3x2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_GetOutput(self: *const T, uiIndex: u32, pContext: ?*IMILBitmapEffectRenderContext, pfModifyInPlace: ?*i16, ppBitmapSource: ?*?*IWICBitmapSource) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).GetOutput(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, pContext, pfModifyInPlace, ppBitmapSource);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_TransformPoint(self: *const T, uiIndex: u32, p: ?*MilPoint2D, fForwardTransform: i16, pContext: ?*IMILBitmapEffectRenderContext, pfPointTransformed: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).TransformPoint(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, p, fForwardTransform, pContext, pfPointTransformed);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_TransformRect(self: *const T, uiIndex: u32, p: ?*MilRectD, fForwardTransform: i16, pContext: ?*IMILBitmapEffectRenderContext) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).TransformRect(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, p, fForwardTransform, pContext);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_HasAffineTransform(self: *const T, uiIndex: u32, pfAffine: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).HasAffineTransform(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, pfAffine);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_HasInverseTransform(self: *const T, uiIndex: u32, pfHasInverse: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).HasInverseTransform(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, pfHasInverse);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitive_GetAffineMatrix(self: *const T, uiIndex: u32, pMatrix: ?*MilMatrix3x2D) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitive.VTable, self.vtable).GetAffineMatrix(@ptrCast(*const IMILBitmapEffectPrimitive, self), uiIndex, pMatrix);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitiveImpl_Value = Guid.initString("ce41e00b-efa6-44e7-b007-dd042e3ae126");
pub const IID_IMILBitmapEffectPrimitiveImpl = &IID_IMILBitmapEffectPrimitiveImpl_Value;
pub const IMILBitmapEffectPrimitiveImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDirty: fn(
            self: *const IMILBitmapEffectPrimitiveImpl,
            uiOutputIndex: u32,
            pfDirty: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVolatile: fn(
            self: *const IMILBitmapEffectPrimitiveImpl,
            uiOutputIndex: u32,
            pfVolatile: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitiveImpl_IsDirty(self: *const T, uiOutputIndex: u32, pfDirty: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitiveImpl.VTable, self.vtable).IsDirty(@ptrCast(*const IMILBitmapEffectPrimitiveImpl, self), uiOutputIndex, pfDirty);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectPrimitiveImpl_IsVolatile(self: *const T, uiOutputIndex: u32, pfVolatile: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectPrimitiveImpl.VTable, self.vtable).IsVolatile(@ptrCast(*const IMILBitmapEffectPrimitiveImpl, self), uiOutputIndex, pfVolatile);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffects_Value = Guid.initString("51ac3dce-67c5-448b-9180-ad3eabddd5dd");
pub const IID_IMILBitmapEffects = &IID_IMILBitmapEffects_Value;
pub const IMILBitmapEffects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        _NewEnum: fn(
            self: *const IMILBitmapEffects,
            ppiuReturn: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: fn(
            self: *const IMILBitmapEffects,
            ppEffect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: fn(
            self: *const IMILBitmapEffects,
            uindex: u32,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: fn(
            self: *const IMILBitmapEffects,
            puiCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffects__NewEnum(self: *const T, ppiuReturn: ?*?*IUnknown) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffects.VTable, self.vtable)._NewEnum(@ptrCast(*const IMILBitmapEffects, self), ppiuReturn);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffects_get_Parent(self: *const T, ppEffect: ?*?*IMILBitmapEffectGroup) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffects.VTable, self.vtable).get_Parent(@ptrCast(*const IMILBitmapEffects, self), ppEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffects_Item(self: *const T, uindex: u32, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffects.VTable, self.vtable).Item(@ptrCast(*const IMILBitmapEffects, self), uindex, ppEffect);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffects_get_Count(self: *const T, puiCount: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffects.VTable, self.vtable).get_Count(@ptrCast(*const IMILBitmapEffects, self), puiCount);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnector_Value = Guid.initString("f59567b3-76c1-4d47-ba1e-79f955e350ef");
pub const IID_IMILBitmapEffectConnector = &IID_IMILBitmapEffectConnector_Value;
pub const IMILBitmapEffectConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnectorInfo.VTable,
        IsConnected: fn(
            self: *const IMILBitmapEffectConnector,
            pfConnected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapEffect: fn(
            self: *const IMILBitmapEffectConnector,
            ppEffect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IMILBitmapEffectConnectorInfo.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnector_IsConnected(self: *const T, pfConnected: ?*i16) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnector.VTable, self.vtable).IsConnected(@ptrCast(*const IMILBitmapEffectConnector, self), pfConnected);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectConnector_GetBitmapEffect(self: *const T, ppEffect: ?*?*IMILBitmapEffect) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectConnector.VTable, self.vtable).GetBitmapEffect(@ptrCast(*const IMILBitmapEffectConnector, self), ppEffect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInputConnector_Value = Guid.initString("a9b4ecaa-7a3c-45e7-8573-f4b81b60dd6c");
pub const IID_IMILBitmapEffectInputConnector = &IID_IMILBitmapEffectInputConnector_Value;
pub const IMILBitmapEffectInputConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        ConnectTo: fn(
            self: *const IMILBitmapEffectInputConnector,
            pConnector: ?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: fn(
            self: *const IMILBitmapEffectInputConnector,
            ppConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IMILBitmapEffectConnector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectInputConnector_ConnectTo(self: *const T, pConnector: ?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectInputConnector.VTable, self.vtable).ConnectTo(@ptrCast(*const IMILBitmapEffectInputConnector, self), pConnector);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectInputConnector_GetConnection(self: *const T, ppConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectInputConnector.VTable, self.vtable).GetConnection(@ptrCast(*const IMILBitmapEffectInputConnector, self), ppConnector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnector_Value = Guid.initString("92957aad-841b-4866-82ec-8752468b07fd");
pub const IID_IMILBitmapEffectOutputConnector = &IID_IMILBitmapEffectOutputConnector_Value;
pub const IMILBitmapEffectOutputConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        GetNumberConnections: fn(
            self: *const IMILBitmapEffectOutputConnector,
            puiNumberConnections: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: fn(
            self: *const IMILBitmapEffectOutputConnector,
            uiIndex: u32,
            ppConnection: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IMILBitmapEffectConnector.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectOutputConnector_GetNumberConnections(self: *const T, puiNumberConnections: ?*u32) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectOutputConnector.VTable, self.vtable).GetNumberConnections(@ptrCast(*const IMILBitmapEffectOutputConnector, self), puiNumberConnections);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectOutputConnector_GetConnection(self: *const T, uiIndex: u32, ppConnection: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectOutputConnector.VTable, self.vtable).GetConnection(@ptrCast(*const IMILBitmapEffectOutputConnector, self), uiIndex, ppConnection);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnectorImpl_Value = Guid.initString("21fae777-8b39-4bfa-9f2d-f3941ed36913");
pub const IID_IMILBitmapEffectOutputConnectorImpl = &IID_IMILBitmapEffectOutputConnectorImpl_Value;
pub const IMILBitmapEffectOutputConnectorImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBackLink: fn(
            self: *const IMILBitmapEffectOutputConnectorImpl,
            pConnection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBackLink: fn(
            self: *const IMILBitmapEffectOutputConnectorImpl,
            pConnection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectOutputConnectorImpl_AddBackLink(self: *const T, pConnection: ?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectOutputConnectorImpl.VTable, self.vtable).AddBackLink(@ptrCast(*const IMILBitmapEffectOutputConnectorImpl, self), pConnection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectOutputConnectorImpl_RemoveBackLink(self: *const T, pConnection: ?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectOutputConnectorImpl.VTable, self.vtable).RemoveBackLink(@ptrCast(*const IMILBitmapEffectOutputConnectorImpl, self), pConnection);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorInputConnector_Value = Guid.initString("20287e9e-86a2-4e15-953d-eb1438a5b842");
pub const IID_IMILBitmapEffectInteriorInputConnector = &IID_IMILBitmapEffectInteriorInputConnector_Value;
pub const IMILBitmapEffectInteriorInputConnector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: fn(
            self: *const IMILBitmapEffectInteriorInputConnector,
            pInputConnector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectInteriorInputConnector_GetInputConnector(self: *const T, pInputConnector: ?*?*IMILBitmapEffectInputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectInteriorInputConnector.VTable, self.vtable).GetInputConnector(@ptrCast(*const IMILBitmapEffectInteriorInputConnector, self), pInputConnector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorOutputConnector_Value = Guid.initString("00bbb6dc-acc9-4bfc-b344-8bee383dfefa");
pub const IID_IMILBitmapEffectInteriorOutputConnector = &IID_IMILBitmapEffectInteriorOutputConnector_Value;
pub const IMILBitmapEffectInteriorOutputConnector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutputConnector: fn(
            self: *const IMILBitmapEffectInteriorOutputConnector,
            pOutputConnector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectInteriorOutputConnector_GetOutputConnector(self: *const T, pOutputConnector: ?*?*IMILBitmapEffectOutputConnector) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectInteriorOutputConnector.VTable, self.vtable).GetOutputConnector(@ptrCast(*const IMILBitmapEffectInteriorOutputConnector, self), pOutputConnector);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectEvents_Value = Guid.initString("2e880dd8-f8ce-457b-8199-d60bb3d7ef98");
pub const IID_IMILBitmapEffectEvents = &IID_IMILBitmapEffectEvents_Value;
pub const IMILBitmapEffectEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PropertyChange: fn(
            self: *const IMILBitmapEffectEvents,
            pEffect: ?*IMILBitmapEffect,
            bstrPropertyName: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DirtyRegion: fn(
            self: *const IMILBitmapEffectEvents,
            pEffect: ?*IMILBitmapEffect,
            pRect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectEvents_PropertyChange(self: *const T, pEffect: ?*IMILBitmapEffect, bstrPropertyName: ?BSTR) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectEvents.VTable, self.vtable).PropertyChange(@ptrCast(*const IMILBitmapEffectEvents, self), pEffect, bstrPropertyName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IMILBitmapEffectEvents_DirtyRegion(self: *const T, pEffect: ?*IMILBitmapEffect, pRect: ?*MilRectD) callconv(.Inline) HRESULT {
            return @ptrCast(*const IMILBitmapEffectEvents.VTable, self.vtable).DirtyRegion(@ptrCast(*const IMILBitmapEffectEvents, self), pEffect, pRect);
        }
    };}
    pub usingnamespace MethodMixin(@This());
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWICBitmapSource = @import("../graphics/imaging.zig").IWICBitmapSource;
const MilMatrix3x2D = @import("../graphics/dwm.zig").MilMatrix3x2D;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        if (decl.is_pub) {
            _ = decl;
        }
    }
}
